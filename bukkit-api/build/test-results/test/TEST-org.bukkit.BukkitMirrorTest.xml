<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="org.bukkit.BukkitMirrorTest" tests="555" skipped="0" failures="0" errors="0" timestamp="2019-11-24T04:08:30" hostname="pwn" time="0.106">
  <properties/>
  <testcase name="isStatic[0: void org.bukkit.Server.shutdown{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[0: void org.bukkit.Server.shutdown{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[0: void org.bukkit.Server.shutdown{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[0: void org.bukkit.Server.shutdown{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[0: void org.bukkit.Server.shutdown{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[1: java.lang.String org.bukkit.Server.getName{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[1: java.lang.String org.bukkit.Server.getName{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[1: java.lang.String org.bukkit.Server.getName{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[1: java.lang.String org.bukkit.Server.getName{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[1: java.lang.String org.bukkit.Server.getName{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[2: org.bukkit.UnsafeValues org.bukkit.Server.getUnsafe{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[2: org.bukkit.UnsafeValues org.bukkit.Server.getUnsafe{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[2: org.bukkit.UnsafeValues org.bukkit.Server.getUnsafe{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[2: org.bukkit.UnsafeValues org.bukkit.Server.getUnsafe{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[2: org.bukkit.UnsafeValues org.bukkit.Server.getUnsafe{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[3: int org.bukkit.Server.getPort{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="isDeprecated[3: int org.bukkit.Server.getPort{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[3: int org.bukkit.Server.getPort{}]" classname="org.bukkit.BukkitMirrorTest" time="0.004"/>
  <testcase name="returnType[3: int org.bukkit.Server.getPort{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[3: int org.bukkit.Server.getPort{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[4: org.bukkit.map.MapView org.bukkit.Server.createMap{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[4: org.bukkit.map.MapView org.bukkit.Server.createMap{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[4: org.bukkit.map.MapView org.bukkit.Server.createMap{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[4: org.bukkit.map.MapView org.bukkit.Server.createMap{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[4: org.bukkit.map.MapView org.bukkit.Server.createMap{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="isStatic[5: org.bukkit.map.MapView org.bukkit.Server.getMap{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[5: org.bukkit.map.MapView org.bukkit.Server.getMap{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[5: org.bukkit.map.MapView org.bukkit.Server.getMap{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[5: org.bukkit.map.MapView org.bukkit.Server.getMap{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="declaredException[5: org.bukkit.map.MapView org.bukkit.Server.getMap{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[6: java.util.logging.Logger org.bukkit.Server.getLogger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[6: java.util.logging.Logger org.bukkit.Server.getLogger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[6: java.util.logging.Logger org.bukkit.Server.getLogger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[6: java.util.logging.Logger org.bukkit.Server.getLogger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[6: java.util.logging.Logger org.bukkit.Server.getLogger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[7: int org.bukkit.Server.broadcast{java.lang.String,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[7: int org.bukkit.Server.broadcast{java.lang.String,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[7: int org.bukkit.Server.broadcast{java.lang.String,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[7: int org.bukkit.Server.broadcast{java.lang.String,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[7: int org.bukkit.Server.broadcast{java.lang.String,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[8: java.lang.String org.bukkit.Server.getVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[8: java.lang.String org.bukkit.Server.getVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[8: java.lang.String org.bukkit.Server.getVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[8: java.lang.String org.bukkit.Server.getVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[8: java.lang.String org.bukkit.Server.getVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[9: void org.bukkit.Server.reload{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[9: void org.bukkit.Server.reload{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[9: void org.bukkit.Server.reload{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[9: void org.bukkit.Server.reload{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[9: void org.bukkit.Server.reload{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[10: java.lang.String org.bukkit.Server.getShutdownMessage{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[10: java.lang.String org.bukkit.Server.getShutdownMessage{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[10: java.lang.String org.bukkit.Server.getShutdownMessage{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[10: java.lang.String org.bukkit.Server.getShutdownMessage{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[10: java.lang.String org.bukkit.Server.getShutdownMessage{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[11: int org.bukkit.Server.getAmbientSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[11: int org.bukkit.Server.getAmbientSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[11: int org.bukkit.Server.getAmbientSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[11: int org.bukkit.Server.getAmbientSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[11: int org.bukkit.Server.getAmbientSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[12: org.bukkit.scoreboard.ScoreboardManager org.bukkit.Server.getScoreboardManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[12: org.bukkit.scoreboard.ScoreboardManager org.bukkit.Server.getScoreboardManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[12: org.bukkit.scoreboard.ScoreboardManager org.bukkit.Server.getScoreboardManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[12: org.bukkit.scoreboard.ScoreboardManager org.bukkit.Server.getScoreboardManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[12: org.bukkit.scoreboard.ScoreboardManager org.bukkit.Server.getScoreboardManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[13: java.util.Iterator&lt;org.bukkit.advancement.Advancement&gt; org.bukkit.Server.advancementIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[13: java.util.Iterator&lt;org.bukkit.advancement.Advancement&gt; org.bukkit.Server.advancementIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[13: java.util.Iterator&lt;org.bukkit.advancement.Advancement&gt; org.bukkit.Server.advancementIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[13: java.util.Iterator&lt;org.bukkit.advancement.Advancement&gt; org.bukkit.Server.advancementIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[13: java.util.Iterator&lt;org.bukkit.advancement.Advancement&gt; org.bukkit.Server.advancementIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[14: int org.bukkit.Server.getMonsterSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="isDeprecated[14: int org.bukkit.Server.getMonsterSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[14: int org.bukkit.Server.getMonsterSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[14: int org.bukkit.Server.getMonsterSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[14: int org.bukkit.Server.getMonsterSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[15: org.bukkit.GameMode org.bukkit.Server.getDefaultGameMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="isDeprecated[15: org.bukkit.GameMode org.bukkit.Server.getDefaultGameMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[15: org.bukkit.GameMode org.bukkit.Server.getDefaultGameMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="returnType[15: org.bukkit.GameMode org.bukkit.Server.getDefaultGameMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[15: org.bukkit.GameMode org.bukkit.Server.getDefaultGameMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[16: java.io.File org.bukkit.Server.getWorldContainer{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[16: java.io.File org.bukkit.Server.getWorldContainer{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[16: java.io.File org.bukkit.Server.getWorldContainer{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[16: java.io.File org.bukkit.Server.getWorldContainer{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[16: java.io.File org.bukkit.Server.getWorldContainer{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[17: int org.bukkit.Server.getAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[17: int org.bukkit.Server.getAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[17: int org.bukkit.Server.getAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[17: int org.bukkit.Server.getAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[17: int org.bukkit.Server.getAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[18: void org.bukkit.Server.setDefaultGameMode{org.bukkit.GameMode}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[18: void org.bukkit.Server.setDefaultGameMode{org.bukkit.GameMode}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[18: void org.bukkit.Server.setDefaultGameMode{org.bukkit.GameMode}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[18: void org.bukkit.Server.setDefaultGameMode{org.bukkit.GameMode}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[18: void org.bukkit.Server.setDefaultGameMode{org.bukkit.GameMode}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[19: int org.bukkit.Server.getWaterAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[19: int org.bukkit.Server.getWaterAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[19: int org.bukkit.Server.getWaterAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[19: int org.bukkit.Server.getWaterAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[19: int org.bukkit.Server.getWaterAnimalSpawnLimit{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[20: org.bukkit.OfflinePlayer[] org.bukkit.Server.getOfflinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[20: org.bukkit.OfflinePlayer[] org.bukkit.Server.getOfflinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[20: org.bukkit.OfflinePlayer[] org.bukkit.Server.getOfflinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[20: org.bukkit.OfflinePlayer[] org.bukkit.Server.getOfflinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[20: org.bukkit.OfflinePlayer[] org.bukkit.Server.getOfflinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[21: long org.bukkit.Server.getConnectionThrottle{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[21: long org.bukkit.Server.getConnectionThrottle{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[21: long org.bukkit.Server.getConnectionThrottle{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[21: long org.bukkit.Server.getConnectionThrottle{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[21: long org.bukkit.Server.getConnectionThrottle{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[22: java.io.File org.bukkit.Server.getUpdateFolderFile{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[22: java.io.File org.bukkit.Server.getUpdateFolderFile{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[22: java.io.File org.bukkit.Server.getUpdateFolderFile{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[22: java.io.File org.bukkit.Server.getUpdateFolderFile{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[22: java.io.File org.bukkit.Server.getUpdateFolderFile{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[23: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getWhitelistedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[23: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getWhitelistedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[23: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getWhitelistedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[23: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getWhitelistedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[23: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getWhitelistedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[24: int org.bukkit.Server.getTicksPerMonsterSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[24: int org.bukkit.Server.getTicksPerMonsterSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[24: int org.bukkit.Server.getTicksPerMonsterSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[24: int org.bukkit.Server.getTicksPerMonsterSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[24: int org.bukkit.Server.getTicksPerMonsterSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[25: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[25: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[25: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[25: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[25: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[26: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType,int,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[26: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType,int,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[26: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType,int,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[26: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType,int,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="declaredException[26: org.bukkit.inventory.ItemStack org.bukkit.Server.createExplorerMap{org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType,int,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[27: boolean org.bukkit.Server.getGenerateStructures{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[27: boolean org.bukkit.Server.getGenerateStructures{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[27: boolean org.bukkit.Server.getGenerateStructures{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[27: boolean org.bukkit.Server.getGenerateStructures{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[27: boolean org.bukkit.Server.getGenerateStructures{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[28: org.bukkit.plugin.ServicesManager org.bukkit.Server.getServicesManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[28: org.bukkit.plugin.ServicesManager org.bukkit.Server.getServicesManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[28: org.bukkit.plugin.ServicesManager org.bukkit.Server.getServicesManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[28: org.bukkit.plugin.ServicesManager org.bukkit.Server.getServicesManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[28: org.bukkit.plugin.ServicesManager org.bukkit.Server.getServicesManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[29: java.util.Map&lt;java.lang.String, java.lang.String[]&gt; org.bukkit.Server.getCommandAliases{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[29: java.util.Map&lt;java.lang.String, java.lang.String[]&gt; org.bukkit.Server.getCommandAliases{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[29: java.util.Map&lt;java.lang.String, java.lang.String[]&gt; org.bukkit.Server.getCommandAliases{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[29: java.util.Map&lt;java.lang.String, java.lang.String[]&gt; org.bukkit.Server.getCommandAliases{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[29: java.util.Map&lt;java.lang.String, java.lang.String[]&gt; org.bukkit.Server.getCommandAliases{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[30: int org.bukkit.Server.getTicksPerAnimalSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="isDeprecated[30: int org.bukkit.Server.getTicksPerAnimalSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[30: int org.bukkit.Server.getTicksPerAnimalSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[30: int org.bukkit.Server.getTicksPerAnimalSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[30: int org.bukkit.Server.getTicksPerAnimalSpawns{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[31: org.bukkit.inventory.Merchant org.bukkit.Server.createMerchant{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[31: org.bukkit.inventory.Merchant org.bukkit.Server.createMerchant{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[31: org.bukkit.inventory.Merchant org.bukkit.Server.createMerchant{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[31: org.bukkit.inventory.Merchant org.bukkit.Server.createMerchant{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[31: org.bukkit.inventory.Merchant org.bukkit.Server.createMerchant{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[32: org.bukkit.Warning$WarningState org.bukkit.Server.getWarningState{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[32: org.bukkit.Warning$WarningState org.bukkit.Server.getWarningState{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[32: org.bukkit.Warning$WarningState org.bukkit.Server.getWarningState{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[32: org.bukkit.Warning$WarningState org.bukkit.Server.getWarningState{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[32: org.bukkit.Warning$WarningState org.bukkit.Server.getWarningState{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[33: org.bukkit.util.CachedServerIcon org.bukkit.Server.getServerIcon{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[33: org.bukkit.util.CachedServerIcon org.bukkit.Server.getServerIcon{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[33: org.bukkit.util.CachedServerIcon org.bukkit.Server.getServerIcon{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[33: org.bukkit.util.CachedServerIcon org.bukkit.Server.getServerIcon{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[33: org.bukkit.util.CachedServerIcon org.bukkit.Server.getServerIcon{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[34: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.awt.image.BufferedImage} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[34: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.awt.image.BufferedImage} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[34: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.awt.image.BufferedImage} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[34: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.awt.image.BufferedImage} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[34: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.awt.image.BufferedImage} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[35: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.io.File} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[35: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.io.File} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[35: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.io.File} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.004"/>
  <testcase name="returnType[35: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.io.File} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[35: org.bukkit.util.CachedServerIcon org.bukkit.Server.loadServerIcon{java.io.File} throws java.lang.IllegalArgumentException,java.lang.Exception]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[36: org.bukkit.entity.Entity org.bukkit.Server.getEntity{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[36: org.bukkit.entity.Entity org.bukkit.Server.getEntity{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[36: org.bukkit.entity.Entity org.bukkit.Server.getEntity{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[36: org.bukkit.entity.Entity org.bukkit.Server.getEntity{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[36: org.bukkit.entity.Entity org.bukkit.Server.getEntity{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[37: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[37: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[37: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[37: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[37: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[38: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.util.function.Consumer&lt;org.bukkit.block.data.BlockData&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[38: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.util.function.Consumer&lt;org.bukkit.block.data.BlockData&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[38: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.util.function.Consumer&lt;org.bukkit.block.data.BlockData&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[38: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.util.function.Consumer&lt;org.bukkit.block.data.BlockData&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[38: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.util.function.Consumer&lt;org.bukkit.block.data.BlockData&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[39: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[39: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[39: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[39: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[39: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{org.bukkit.Material,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[40: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[40: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[40: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[40: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[40: org.bukkit.block.data.BlockData org.bukkit.Server.createBlockData{java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[41: org.bukkit.loot.LootTable org.bukkit.Server.getLootTable{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[41: org.bukkit.loot.LootTable org.bukkit.Server.getLootTable{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[41: org.bukkit.loot.LootTable org.bukkit.Server.getLootTable{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[41: org.bukkit.loot.LootTable org.bukkit.Server.getLootTable{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[41: org.bukkit.loot.LootTable org.bukkit.Server.getLootTable{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[42: org.bukkit.generator.ChunkGenerator$ChunkData org.bukkit.Server.createChunkData{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[42: org.bukkit.generator.ChunkGenerator$ChunkData org.bukkit.Server.createChunkData{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[42: org.bukkit.generator.ChunkGenerator$ChunkData org.bukkit.Server.createChunkData{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[42: org.bukkit.generator.ChunkGenerator$ChunkData org.bukkit.Server.createChunkData{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[42: org.bukkit.generator.ChunkGenerator$ChunkData org.bukkit.Server.createChunkData{org.bukkit.World}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[43: java.util.List&lt;org.bukkit.entity.Entity&gt; org.bukkit.Server.selectEntities{org.bukkit.command.CommandSender,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[43: java.util.List&lt;org.bukkit.entity.Entity&gt; org.bukkit.Server.selectEntities{org.bukkit.command.CommandSender,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[43: java.util.List&lt;org.bukkit.entity.Entity&gt; org.bukkit.Server.selectEntities{org.bukkit.command.CommandSender,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[43: java.util.List&lt;org.bukkit.entity.Entity&gt; org.bukkit.Server.selectEntities{org.bukkit.command.CommandSender,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[43: java.util.List&lt;org.bukkit.entity.Entity&gt; org.bukkit.Server.selectEntities{org.bukkit.command.CommandSender,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[44: void org.bukkit.Server.unbanIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[44: void org.bukkit.Server.unbanIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[44: void org.bukkit.Server.unbanIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[44: void org.bukkit.Server.unbanIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="declaredException[44: void org.bukkit.Server.unbanIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[45: org.bukkit.boss.KeyedBossBar org.bukkit.Server.getBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[45: org.bukkit.boss.KeyedBossBar org.bukkit.Server.getBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[45: org.bukkit.boss.KeyedBossBar org.bukkit.Server.getBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[45: org.bukkit.boss.KeyedBossBar org.bukkit.Server.getBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[45: org.bukkit.boss.KeyedBossBar org.bukkit.Server.getBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[46: org.bukkit.plugin.messaging.Messenger org.bukkit.Server.getMessenger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[46: org.bukkit.plugin.messaging.Messenger org.bukkit.Server.getMessenger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[46: org.bukkit.plugin.messaging.Messenger org.bukkit.Server.getMessenger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[46: org.bukkit.plugin.messaging.Messenger org.bukkit.Server.getMessenger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[46: org.bukkit.plugin.messaging.Messenger org.bukkit.Server.getMessenger{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[47: org.bukkit.help.HelpMap org.bukkit.Server.getHelpMap{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[47: org.bukkit.help.HelpMap org.bukkit.Server.getHelpMap{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[47: org.bukkit.help.HelpMap org.bukkit.Server.getHelpMap{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[47: org.bukkit.help.HelpMap org.bukkit.Server.getHelpMap{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[47: org.bukkit.help.HelpMap org.bukkit.Server.getHelpMap{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[48: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getBannedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[48: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getBannedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[48: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getBannedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[48: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getBannedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[48: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getBannedPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[49: void org.bukkit.Server.banIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[49: void org.bukkit.Server.banIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[49: void org.bukkit.Server.banIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[49: void org.bukkit.Server.banIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[49: void org.bukkit.Server.banIP{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[50: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[50: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[50: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="returnType[50: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[50: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[51: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[51: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[51: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[51: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[51: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[52: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[52: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[52: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[52: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[52: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[53: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[53: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[53: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[53: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[53: org.bukkit.inventory.Inventory org.bukkit.Server.createInventory{org.bukkit.inventory.InventoryHolder,int,java.lang.String} throws java.lang.IllegalArgumentException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[54: void org.bukkit.Server.setIdleTimeout{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[54: void org.bukkit.Server.setIdleTimeout{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[54: void org.bukkit.Server.setIdleTimeout{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[54: void org.bukkit.Server.setIdleTimeout{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[54: void org.bukkit.Server.setIdleTimeout{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[55: int org.bukkit.Server.getIdleTimeout{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[55: int org.bukkit.Server.getIdleTimeout{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[55: int org.bukkit.Server.getIdleTimeout{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[55: int org.bukkit.Server.getIdleTimeout{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[55: int org.bukkit.Server.getIdleTimeout{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[56: org.bukkit.boss.BossBar org.bukkit.Server.createBossBar{java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[56: org.bukkit.boss.BossBar org.bukkit.Server.createBossBar{java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[56: org.bukkit.boss.BossBar org.bukkit.Server.createBossBar{java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.002"/>
  <testcase name="returnType[56: org.bukkit.boss.BossBar org.bukkit.Server.createBossBar{java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[56: org.bukkit.boss.BossBar org.bukkit.Server.createBossBar{java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[57: org.bukkit.boss.KeyedBossBar org.bukkit.Server.createBossBar{org.bukkit.NamespacedKey,java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[57: org.bukkit.boss.KeyedBossBar org.bukkit.Server.createBossBar{org.bukkit.NamespacedKey,java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[57: org.bukkit.boss.KeyedBossBar org.bukkit.Server.createBossBar{org.bukkit.NamespacedKey,java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[57: org.bukkit.boss.KeyedBossBar org.bukkit.Server.createBossBar{org.bukkit.NamespacedKey,java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[57: org.bukkit.boss.KeyedBossBar org.bukkit.Server.createBossBar{org.bukkit.NamespacedKey,java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[58: org.bukkit.advancement.Advancement org.bukkit.Server.getAdvancement{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[58: org.bukkit.advancement.Advancement org.bukkit.Server.getAdvancement{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[58: org.bukkit.advancement.Advancement org.bukkit.Server.getAdvancement{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[58: org.bukkit.advancement.Advancement org.bukkit.Server.getAdvancement{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[58: org.bukkit.advancement.Advancement org.bukkit.Server.getAdvancement{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[59: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getOperators{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[59: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getOperators{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[59: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getOperators{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[59: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getOperators{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[59: java.util.Set&lt;org.bukkit.OfflinePlayer&gt; org.bukkit.Server.getOperators{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[60: boolean org.bukkit.Server.removeBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[60: boolean org.bukkit.Server.removeBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[60: boolean org.bukkit.Server.removeBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[60: boolean org.bukkit.Server.removeBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[60: boolean org.bukkit.Server.removeBossBar{org.bukkit.NamespacedKey}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[61: java.util.Iterator&lt;org.bukkit.boss.KeyedBossBar&gt; org.bukkit.Server.getBossBars{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[61: java.util.Iterator&lt;org.bukkit.boss.KeyedBossBar&gt; org.bukkit.Server.getBossBars{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[61: java.util.Iterator&lt;org.bukkit.boss.KeyedBossBar&gt; org.bukkit.Server.getBossBars{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[61: java.util.Iterator&lt;org.bukkit.boss.KeyedBossBar&gt; org.bukkit.Server.getBossBars{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[61: java.util.Iterator&lt;org.bukkit.boss.KeyedBossBar&gt; org.bukkit.Server.getBossBars{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[62: java.lang.String org.bukkit.Server.getMotd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[62: java.lang.String org.bukkit.Server.getMotd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[62: java.lang.String org.bukkit.Server.getMotd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[62: java.lang.String org.bukkit.Server.getMotd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[62: java.lang.String org.bukkit.Server.getMotd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[63: org.bukkit.inventory.ItemFactory org.bukkit.Server.getItemFactory{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[63: org.bukkit.inventory.ItemFactory org.bukkit.Server.getItemFactory{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[63: org.bukkit.inventory.ItemFactory org.bukkit.Server.getItemFactory{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[63: org.bukkit.inventory.ItemFactory org.bukkit.Server.getItemFactory{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[63: org.bukkit.inventory.ItemFactory org.bukkit.Server.getItemFactory{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[64: &lt;T&gt; org.bukkit.Tag&lt;T&gt; org.bukkit.Server.getTag{java.lang.String,org.bukkit.NamespacedKey,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[64: &lt;T&gt; org.bukkit.Tag&lt;T&gt; org.bukkit.Server.getTag{java.lang.String,org.bukkit.NamespacedKey,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[64: &lt;T&gt; org.bukkit.Tag&lt;T&gt; org.bukkit.Server.getTag{java.lang.String,org.bukkit.NamespacedKey,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[64: &lt;T&gt; org.bukkit.Tag&lt;T&gt; org.bukkit.Server.getTag{java.lang.String,org.bukkit.NamespacedKey,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="declaredException[64: &lt;T&gt; org.bukkit.Tag&lt;T&gt; org.bukkit.Server.getTag{java.lang.String,org.bukkit.NamespacedKey,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[65: &lt;T&gt; java.lang.Iterable&lt;org.bukkit.Tag&lt;T&gt;&gt; org.bukkit.Server.getTags{java.lang.String,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[65: &lt;T&gt; java.lang.Iterable&lt;org.bukkit.Tag&lt;T&gt;&gt; org.bukkit.Server.getTags{java.lang.String,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[65: &lt;T&gt; java.lang.Iterable&lt;org.bukkit.Tag&lt;T&gt;&gt; org.bukkit.Server.getTags{java.lang.String,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[65: &lt;T&gt; java.lang.Iterable&lt;org.bukkit.Tag&lt;T&gt;&gt; org.bukkit.Server.getTags{java.lang.String,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[65: &lt;T&gt; java.lang.Iterable&lt;org.bukkit.Tag&lt;T&gt;&gt; org.bukkit.Server.getTags{java.lang.String,java.lang.Class&lt;T&gt;}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[66: org.bukkit.BanList org.bukkit.Server.getBanList{org.bukkit.BanList$Type}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[66: org.bukkit.BanList org.bukkit.Server.getBanList{org.bukkit.BanList$Type}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[66: org.bukkit.BanList org.bukkit.Server.getBanList{org.bukkit.BanList$Type}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[66: org.bukkit.BanList org.bukkit.Server.getBanList{org.bukkit.BanList$Type}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[66: org.bukkit.BanList org.bukkit.Server.getBanList{org.bukkit.BanList$Type}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[67: org.bukkit.command.ConsoleCommandSender org.bukkit.Server.getConsoleSender{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[67: org.bukkit.command.ConsoleCommandSender org.bukkit.Server.getConsoleSender{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[67: org.bukkit.command.ConsoleCommandSender org.bukkit.Server.getConsoleSender{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[67: org.bukkit.command.ConsoleCommandSender org.bukkit.Server.getConsoleSender{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[67: org.bukkit.command.ConsoleCommandSender org.bukkit.Server.getConsoleSender{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[68: boolean org.bukkit.Server.isPrimaryThread{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[68: boolean org.bukkit.Server.isPrimaryThread{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[68: boolean org.bukkit.Server.isPrimaryThread{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[68: boolean org.bukkit.Server.isPrimaryThread{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[68: boolean org.bukkit.Server.isPrimaryThread{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[69: int org.bukkit.Server.getViewDistance{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[69: int org.bukkit.Server.getViewDistance{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[69: int org.bukkit.Server.getViewDistance{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[69: int org.bukkit.Server.getViewDistance{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[69: int org.bukkit.Server.getViewDistance{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[70: boolean org.bukkit.Server.getAllowEnd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[70: boolean org.bukkit.Server.getAllowEnd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[70: boolean org.bukkit.Server.getAllowEnd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[70: boolean org.bukkit.Server.getAllowEnd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[70: boolean org.bukkit.Server.getAllowEnd{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[71: java.lang.String org.bukkit.Server.getUpdateFolder{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[71: java.lang.String org.bukkit.Server.getUpdateFolder{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[71: java.lang.String org.bukkit.Server.getUpdateFolder{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[71: java.lang.String org.bukkit.Server.getUpdateFolder{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[71: java.lang.String org.bukkit.Server.getUpdateFolder{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[72: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[72: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[72: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[72: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[72: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[73: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[73: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[73: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[73: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[73: org.bukkit.entity.Player org.bukkit.Server.getPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[74: void org.bukkit.Server.reloadWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[74: void org.bukkit.Server.reloadWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[74: void org.bukkit.Server.reloadWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[74: void org.bukkit.Server.reloadWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[74: void org.bukkit.Server.reloadWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[75: org.bukkit.scheduler.BukkitScheduler org.bukkit.Server.getScheduler{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[75: org.bukkit.scheduler.BukkitScheduler org.bukkit.Server.getScheduler{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[75: org.bukkit.scheduler.BukkitScheduler org.bukkit.Server.getScheduler{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[75: org.bukkit.scheduler.BukkitScheduler org.bukkit.Server.getScheduler{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[75: org.bukkit.scheduler.BukkitScheduler org.bukkit.Server.getScheduler{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[76: java.util.List&lt;org.bukkit.World&gt; org.bukkit.Server.getWorlds{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[76: java.util.List&lt;org.bukkit.World&gt; org.bukkit.Server.getWorlds{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[76: java.util.List&lt;org.bukkit.World&gt; org.bukkit.Server.getWorlds{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[76: java.util.List&lt;org.bukkit.World&gt; org.bukkit.Server.getWorlds{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[76: java.util.List&lt;org.bukkit.World&gt; org.bukkit.Server.getWorlds{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[77: org.bukkit.entity.Player org.bukkit.Server.getPlayerExact{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[77: org.bukkit.entity.Player org.bukkit.Server.getPlayerExact{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[77: org.bukkit.entity.Player org.bukkit.Server.getPlayerExact{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[77: org.bukkit.entity.Player org.bukkit.Server.getPlayerExact{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[77: org.bukkit.entity.Player org.bukkit.Server.getPlayerExact{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[78: org.bukkit.plugin.PluginManager org.bukkit.Server.getPluginManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[78: org.bukkit.plugin.PluginManager org.bukkit.Server.getPluginManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[78: org.bukkit.plugin.PluginManager org.bukkit.Server.getPluginManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[78: org.bukkit.plugin.PluginManager org.bukkit.Server.getPluginManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[78: org.bukkit.plugin.PluginManager org.bukkit.Server.getPluginManager{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[79: boolean org.bukkit.Server.hasWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[79: boolean org.bukkit.Server.hasWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[79: boolean org.bukkit.Server.hasWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[79: boolean org.bukkit.Server.hasWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[79: boolean org.bukkit.Server.hasWhitelist{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[80: org.bukkit.World org.bukkit.Server.createWorld{org.bukkit.WorldCreator}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[80: org.bukkit.World org.bukkit.Server.createWorld{org.bukkit.WorldCreator}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[80: org.bukkit.World org.bukkit.Server.createWorld{org.bukkit.WorldCreator}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[80: org.bukkit.World org.bukkit.Server.createWorld{org.bukkit.WorldCreator}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[80: org.bukkit.World org.bukkit.Server.createWorld{org.bukkit.WorldCreator}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[81: boolean org.bukkit.Server.unloadWorld{org.bukkit.World,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[81: boolean org.bukkit.Server.unloadWorld{org.bukkit.World,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[81: boolean org.bukkit.Server.unloadWorld{org.bukkit.World,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[81: boolean org.bukkit.Server.unloadWorld{org.bukkit.World,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[81: boolean org.bukkit.Server.unloadWorld{org.bukkit.World,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[82: boolean org.bukkit.Server.unloadWorld{java.lang.String,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[82: boolean org.bukkit.Server.unloadWorld{java.lang.String,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[82: boolean org.bukkit.Server.unloadWorld{java.lang.String,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.005"/>
  <testcase name="returnType[82: boolean org.bukkit.Server.unloadWorld{java.lang.String,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="declaredException[82: boolean org.bukkit.Server.unloadWorld{java.lang.String,boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[83: java.util.List&lt;org.bukkit.entity.Player&gt; org.bukkit.Server.matchPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[83: java.util.List&lt;org.bukkit.entity.Player&gt; org.bukkit.Server.matchPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[83: java.util.List&lt;org.bukkit.entity.Player&gt; org.bukkit.Server.matchPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[83: java.util.List&lt;org.bukkit.entity.Player&gt; org.bukkit.Server.matchPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[83: java.util.List&lt;org.bukkit.entity.Player&gt; org.bukkit.Server.matchPlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[84: org.bukkit.World org.bukkit.Server.getWorld{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[84: org.bukkit.World org.bukkit.Server.getWorld{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[84: org.bukkit.World org.bukkit.Server.getWorld{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[84: org.bukkit.World org.bukkit.Server.getWorld{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[84: org.bukkit.World org.bukkit.Server.getWorld{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[85: org.bukkit.World org.bukkit.Server.getWorld{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[85: org.bukkit.World org.bukkit.Server.getWorld{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[85: org.bukkit.World org.bukkit.Server.getWorld{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[85: org.bukkit.World org.bukkit.Server.getWorld{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[85: org.bukkit.World org.bukkit.Server.getWorld{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[86: int org.bukkit.Server.broadcastMessage{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[86: int org.bukkit.Server.broadcastMessage{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[86: int org.bukkit.Server.broadcastMessage{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[86: int org.bukkit.Server.broadcastMessage{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[86: int org.bukkit.Server.broadcastMessage{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[87: java.lang.String org.bukkit.Server.getIp{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[87: java.lang.String org.bukkit.Server.getIp{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[87: java.lang.String org.bukkit.Server.getIp{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[87: java.lang.String org.bukkit.Server.getIp{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[87: java.lang.String org.bukkit.Server.getIp{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[88: java.lang.String org.bukkit.Server.getWorldType{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[88: java.lang.String org.bukkit.Server.getWorldType{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[88: java.lang.String org.bukkit.Server.getWorldType{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[88: java.lang.String org.bukkit.Server.getWorldType{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[88: java.lang.String org.bukkit.Server.getWorldType{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[89: void org.bukkit.Server.setWhitelist{boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[89: void org.bukkit.Server.setWhitelist{boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[89: void org.bukkit.Server.setWhitelist{boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[89: void org.bukkit.Server.setWhitelist{boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[89: void org.bukkit.Server.setWhitelist{boolean}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[90: boolean org.bukkit.Server.getAllowNether{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[90: boolean org.bukkit.Server.getAllowNether{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[90: boolean org.bukkit.Server.getAllowNether{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[90: boolean org.bukkit.Server.getAllowNether{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[90: boolean org.bukkit.Server.getAllowNether{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[91: java.lang.String org.bukkit.Server.getBukkitVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[91: java.lang.String org.bukkit.Server.getBukkitVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[91: java.lang.String org.bukkit.Server.getBukkitVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[91: java.lang.String org.bukkit.Server.getBukkitVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[91: java.lang.String org.bukkit.Server.getBukkitVersion{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[92: java.util.Collection&lt;? extends org.bukkit.entity.Player&gt; org.bukkit.Server.getOnlinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[92: java.util.Collection&lt;? extends org.bukkit.entity.Player&gt; org.bukkit.Server.getOnlinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[92: java.util.Collection&lt;? extends org.bukkit.entity.Player&gt; org.bukkit.Server.getOnlinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[92: java.util.Collection&lt;? extends org.bukkit.entity.Player&gt; org.bukkit.Server.getOnlinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[92: java.util.Collection&lt;? extends org.bukkit.entity.Player&gt; org.bukkit.Server.getOnlinePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[93: int org.bukkit.Server.getMaxPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[93: int org.bukkit.Server.getMaxPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[93: int org.bukkit.Server.getMaxPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="returnType[93: int org.bukkit.Server.getMaxPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[93: int org.bukkit.Server.getMaxPlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[94: boolean org.bukkit.Server.addRecipe{org.bukkit.inventory.Recipe}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[94: boolean org.bukkit.Server.addRecipe{org.bukkit.inventory.Recipe}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[94: boolean org.bukkit.Server.addRecipe{org.bukkit.inventory.Recipe}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[94: boolean org.bukkit.Server.addRecipe{org.bukkit.inventory.Recipe}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[94: boolean org.bukkit.Server.addRecipe{org.bukkit.inventory.Recipe}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[95: int org.bukkit.Server.getSpawnRadius{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[95: int org.bukkit.Server.getSpawnRadius{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[95: int org.bukkit.Server.getSpawnRadius{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[95: int org.bukkit.Server.getSpawnRadius{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[95: int org.bukkit.Server.getSpawnRadius{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[96: boolean org.bukkit.Server.getOnlineMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[96: boolean org.bukkit.Server.getOnlineMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[96: boolean org.bukkit.Server.getOnlineMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[96: boolean org.bukkit.Server.getOnlineMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[96: boolean org.bukkit.Server.getOnlineMode{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[97: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[97: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="parameterTypes[97: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[97: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[97: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[98: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[98: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[98: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[98: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[98: org.bukkit.OfflinePlayer org.bukkit.Server.getOfflinePlayer{java.util.UUID}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[99: void org.bukkit.Server.reloadData{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[99: void org.bukkit.Server.reloadData{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[99: void org.bukkit.Server.reloadData{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[99: void org.bukkit.Server.reloadData{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[99: void org.bukkit.Server.reloadData{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[100: void org.bukkit.Server.savePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[100: void org.bukkit.Server.savePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[100: void org.bukkit.Server.savePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[100: void org.bukkit.Server.savePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[100: void org.bukkit.Server.savePlayers{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[101: java.util.Set&lt;java.lang.String&gt; org.bukkit.Server.getIPBans{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[101: java.util.Set&lt;java.lang.String&gt; org.bukkit.Server.getIPBans{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[101: java.util.Set&lt;java.lang.String&gt; org.bukkit.Server.getIPBans{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[101: java.util.Set&lt;java.lang.String&gt; org.bukkit.Server.getIPBans{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[101: java.util.Set&lt;java.lang.String&gt; org.bukkit.Server.getIPBans{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[102: org.bukkit.command.PluginCommand org.bukkit.Server.getPluginCommand{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[102: org.bukkit.command.PluginCommand org.bukkit.Server.getPluginCommand{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[102: org.bukkit.command.PluginCommand org.bukkit.Server.getPluginCommand{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[102: org.bukkit.command.PluginCommand org.bukkit.Server.getPluginCommand{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[102: org.bukkit.command.PluginCommand org.bukkit.Server.getPluginCommand{java.lang.String}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[103: boolean org.bukkit.Server.dispatchCommand{org.bukkit.command.CommandSender,java.lang.String} throws org.bukkit.command.CommandException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[103: boolean org.bukkit.Server.dispatchCommand{org.bukkit.command.CommandSender,java.lang.String} throws org.bukkit.command.CommandException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[103: boolean org.bukkit.Server.dispatchCommand{org.bukkit.command.CommandSender,java.lang.String} throws org.bukkit.command.CommandException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[103: boolean org.bukkit.Server.dispatchCommand{org.bukkit.command.CommandSender,java.lang.String} throws org.bukkit.command.CommandException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[103: boolean org.bukkit.Server.dispatchCommand{org.bukkit.command.CommandSender,java.lang.String} throws org.bukkit.command.CommandException]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[104: java.util.List&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.getRecipesFor{org.bukkit.inventory.ItemStack}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[104: java.util.List&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.getRecipesFor{org.bukkit.inventory.ItemStack}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[104: java.util.List&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.getRecipesFor{org.bukkit.inventory.ItemStack}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[104: java.util.List&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.getRecipesFor{org.bukkit.inventory.ItemStack}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[104: java.util.List&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.getRecipesFor{org.bukkit.inventory.ItemStack}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[105: java.util.Iterator&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.recipeIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[105: java.util.Iterator&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.recipeIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[105: java.util.Iterator&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.recipeIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[105: java.util.Iterator&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.recipeIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[105: java.util.Iterator&lt;org.bukkit.inventory.Recipe&gt; org.bukkit.Server.recipeIterator{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[106: void org.bukkit.Server.clearRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[106: void org.bukkit.Server.clearRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[106: void org.bukkit.Server.clearRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[106: void org.bukkit.Server.clearRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[106: void org.bukkit.Server.clearRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[107: void org.bukkit.Server.resetRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[107: void org.bukkit.Server.resetRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[107: void org.bukkit.Server.resetRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.001"/>
  <testcase name="returnType[107: void org.bukkit.Server.resetRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[107: void org.bukkit.Server.resetRecipes{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[108: void org.bukkit.Server.setSpawnRadius{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[108: void org.bukkit.Server.setSpawnRadius{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[108: void org.bukkit.Server.setSpawnRadius{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[108: void org.bukkit.Server.setSpawnRadius{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[108: void org.bukkit.Server.setSpawnRadius{int}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[109: boolean org.bukkit.Server.getAllowFlight{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[109: boolean org.bukkit.Server.getAllowFlight{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[109: boolean org.bukkit.Server.getAllowFlight{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[109: boolean org.bukkit.Server.getAllowFlight{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[109: boolean org.bukkit.Server.getAllowFlight{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isStatic[110: boolean org.bukkit.Server.isHardcore{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="isDeprecated[110: boolean org.bukkit.Server.isHardcore{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="parameterTypes[110: boolean org.bukkit.Server.isHardcore{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="returnType[110: boolean org.bukkit.Server.isHardcore{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <testcase name="declaredException[110: boolean org.bukkit.Server.isHardcore{}]" classname="org.bukkit.BukkitMirrorTest" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
